#!/usr/bin/env python
from __future__ import print_function

import os
import json
import traceback
import subprocess

import colorama
colorama.init()

port = 5006

examples = []

def add_examples(examples_dir, excludes=set([]), server=False):
    for file in os.listdir(examples_dir):
        if not file.startswith('__') and file.endswith(".py") and file not in excludes:
            if isinstance(server, set):
                is_server = file in server
            else:
                is_server = server

            examples.append((os.path.join(examples_dir, file), is_server))

glyphs_dir = os.path.join("glyphs")
glyphs_server = set(["data_select_tool.py", "glyph2.py", "maps.py", "prim.py"])
glyphs_excludes = set(["line_animate.py"])
add_examples(glyphs_dir, glyphs_excludes, server=glyphs_server)

plotting_file_dir = os.path.join("plotting", "file")
add_examples(plotting_file_dir, server=False)

plotting_server_dir = os.path.join("plotting", "server")
plotting_server_excludes = set(["animated.py", "line_animate.py"])
add_examples(plotting_server_dir, plotting_server_excludes, server=True)

def fail(msg):
    print("%s[FAIL]%s %s" % (colorama.Fore.RED, colorama.Style.RESET_ALL, msg))

def ok(msg):
    print("%s[OK]%s %s" % (colorama.Fore.GREEN, colorama.Style.RESET_ALL, msg))

cwd = os.getcwd()
os.environ['BOKEH_BROWSER'] = 'dummy'

for example, is_server in examples:
    print("Testing %s ..." % example)

    module_cwd = os.path.dirname(example)
    module = os.path.splitext(example)[0].replace('/', '.')

    try:
        os.chdir(module_cwd)

        try:
            __import__(module)
        finally:
            os.chdir(cwd)
    except SystemExit:
        raise
    except KeyboardInterrupt:
        pass
    except:
        traceback.print_exc()
        fail(example)
    else:
        no_ext = os.path.splitext(os.path.abspath(example))[0]

        png_file = no_ext + '.png'
        html_file = no_ext + '.html'

        if is_server:
            url = 'http://localhost:%d/bokeh/doc/%s/show' % (port, os.path.basename(no_ext))
        else:
            url = 'file://' + html_file

        proc = subprocess.Popen(["phantomjs", "test.js", url, png_file], stdout=subprocess.PIPE)

        output = proc.stdout.read()
        result = json.loads(output)

        status = result['status']
        errors = result['errors']

        if status == 'fail':
            fail("failed to load %s" % url)
        elif errors:
            for error in errors:
                print(error['msg'])

                for item in error['trace']:
                    print("    %s: %d" % (item['file'], item['line']))

            fail(example)
        else:
            ok(example)

    print()
