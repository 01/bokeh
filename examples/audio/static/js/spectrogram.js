// Generated by CoffeeScript 1.4.0
(function() {
  var Collections, Spectrogram, spec,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Collections = require('../base').Collections;

  Spectrogram = (function() {

    function Spectrogram() {
      this.on_data = __bind(this.on_data, this);

      this.request_data = __bind(this.request_data, this);
      console.log("initialize");
      this.plot_model = this.create_plot();
      this.render();
    }

    Spectrogram.prototype.request_data = function() {
      var _this = this;
      return $.ajax('http://localhost:5000/data', {
        type: 'GET',
        dataType: 'json',
        error: function(jqXHR, textStatus, errorThrown) {
          return $('body').append("AJAX Error: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
          return _this.on_data(data);
        }
      });
    };

    Spectrogram.prototype.on_data = function(data) {};

    Spectrogram.prototype.render = function(plot_model) {
      var div, myrender;
      console.log("render");
      div = $('<div></div>');
      $('body').append(div);
      myrender = function() {
        var view;
        view = new plot_model.default_view({
          model: this.plot_model
        });
        div.append(view.$el);
        return view.render();
      };
      return _.defer(myrender);
    };

    Spectrogram.prototype.create_plot = function() {
      var g, xaxis, xrange, yaxis, yrange;
      console.log("create_plot");
      xrange = Collections('Range1d').create({
        start: 0,
        end: 10
      });
      yrange = Collections('Range1d').create({
        start: 0,
        end: 10
      });
      this.plot_model = Collections('Plot').create();
      xaxis = Collections('LinearAxis').create({
        orientation: 'bottom',
        parent: plot_model.ref(),
        data_range: xrange.ref()
      });
      yaxis = Collections('LinearAxis').create({
        orientation: 'left',
        parent: plot_model.ref(),
        data_range: yrange.ref()
      });
      return plot_model.set({
        renderers: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = glyphs.length; _i < _len; _i++) {
            g = glyphs[_i];
            _results.push(g.ref());
          }
          return _results;
        })(),
        axes: [xaxis.ref(), yaxis.ref()],
        tools: plot_tools,
        width: dims[0],
        height: dims[1]
      });
    };

    return Spectrogram;

  })();

  spec = new Spectrogram();

  $(document).ready(function() {
    return setInterval(spec.request_data, 30);
  });

}).call(this);
